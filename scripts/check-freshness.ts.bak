/* eslint-disable no-console */
import 'dotenv/config';
import { getSupabase } from '../src/ingest/supabaseClient';
import fs from 'node:fs';
import path from 'node:path';

const TF_MS: Record<string, number> = {
  '1m': 60_000,
  '5m': 300_000,
  '15m': 900_000,
  '1h': 3_600_000,
  '4h': 14_400_000,
  '1d': 86_400_000,
  '1w': 604_800_000,
};

function toleranceMsFor(timeframe: string): number {
  return (TF_MS[timeframe] ?? 86_400_000) * 2;
}

type Pair = { symbol: string; timeframe: string; speed?: string };

function loadPairs(): Pair[] {
  const p = path.join(process.cwd(), 'config', 'ingest.json');
  if (!fs.existsSync(p)) return [{ symbol: 'BTC/USDT', timeframe: '1d', speed: 'Standard' }];
  return JSON.parse(fs.readFileSync(p, 'utf8'));
}

(async () => {
  const sb = getSupabase();
  const pairs = loadPairs();

  const failures: string[] = [];

  for (const p of pairs) {
    const speed = p.speed ?? 'Standard';
    const { data, error } = await sb
      .from('v_tbo_latest')
      .select('symbol,timeframe,speed,ts')
      .eq('symbol', p.symbol)
      .eq('timeframe', p.timeframe)
      .eq('speed', speed)
      .maybeSingle();

    if (error) throw error;
    if (!data?.ts) {
      failures.push(\`\${p.symbol} \${p.timeframe} (\${speed}): no data\`);
      continue;
    }
    const latest = new Date(data.ts).getTime();
    const age = Date.now() - latest;
    const tol = toleranceMsFor(p.timeframe);

      if (age > tol) {
        failures.push(p.symbol + ' ' + p.timeframe + ' (' + speed + ') stale by ' + ((age / 3600000).toFixed(2)) + 'h (tol ' + ((tol / 3600000).toFixed(2)) + 'h)');
      }
    } else {
      console.log(
        \`\${p.symbol} \${p.timeframe} (\${speed}) OK; age \${(age / 3600_000).toFixed(2)}h <= tol \${(tol / 3600_000).toFixed(2)}h\`
      );
    }
  }

  if (failures.length) {
    console.error('Staleness failures:\n' + failures.map((f) => '- ' + f).join('\n'));
    process.exit(1);
  }
  console.log('Freshness OK');
})();
